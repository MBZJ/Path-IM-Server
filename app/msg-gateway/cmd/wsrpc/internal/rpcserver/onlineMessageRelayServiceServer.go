// Code generated by goctl. DO NOT EDIT!
// Source: msg-gateway.proto

package rpcserver

import (
	"context"
	"github.com/Path-IM/Path-IM-Server/app/msg-gateway/cmd/wsrpc/internal/rpclogic"
	"github.com/Path-IM/Path-IM-Server/app/msg-gateway/cmd/wsrpc/internal/rpcsvc"
	"github.com/Path-IM/Path-IM-Server/app/msg-gateway/cmd/wsrpc/pb"
	"github.com/Path-IM/Path-IM-Server/common/xkafka"
	"github.com/Shopify/sarama"
)

type OnlineMessageRelayServiceServer struct {
	svcCtx *rpcsvc.ServiceContext
	pb.UnimplementedOnlineMessageRelayServiceServer
	SingleConsumerGroup   *xkafka.MConsumerGroup
	GroupConsumerGroup    *xkafka.MConsumerGroup
	KickConnConsumerGroup *xkafka.MConsumerGroup
}

func (s *OnlineMessageRelayServiceServer) Subscribe() {
	go s.SingleConsumerGroup.RegisterHandleAndConsumer(&singleConsumer{
		svcCtx: s.svcCtx,
	})
	go s.GroupConsumerGroup.RegisterHandleAndConsumer(&groupConsumer{
		svcCtx: s.svcCtx,
	})
	go s.KickConnConsumerGroup.RegisterHandleAndConsumer(&kickConnConsumer{
		svcCtx: s.svcCtx,
	})
}

func NewOnlineMessageRelayServiceServer(svcCtx *rpcsvc.ServiceContext) *OnlineMessageRelayServiceServer {
	s := &OnlineMessageRelayServiceServer{
		svcCtx: svcCtx,
		SingleConsumerGroup: xkafka.NewMConsumerGroup(&xkafka.MConsumerGroupConfig{
			KafkaVersion:   sarama.V0_10_2_0,
			OffsetsInitial: sarama.OffsetNewest,
			IsReturnErr:    false,
		}, []string{svcCtx.Config.SinglePushConsumer.Topic},
			svcCtx.Config.SinglePushConsumer.Brokers,
			svcCtx.Config.SinglePushConsumer.GetGroupID(),
		),
		GroupConsumerGroup: xkafka.NewMConsumerGroup(&xkafka.MConsumerGroupConfig{
			KafkaVersion:   sarama.V0_10_2_0,
			OffsetsInitial: sarama.OffsetNewest,
			IsReturnErr:    false,
		}, []string{svcCtx.Config.GroupPushConsumer.Topic},
			svcCtx.Config.GroupPushConsumer.Brokers,
			svcCtx.Config.GroupPushConsumer.GetGroupID(),
		),
		KickConnConsumerGroup: xkafka.NewMConsumerGroup(&xkafka.MConsumerGroupConfig{
			KafkaVersion:   sarama.V0_10_2_0,
			OffsetsInitial: sarama.OffsetNewest, IsReturnErr: false,
		}, []string{svcCtx.Config.KickConnConsumerGroup.Topic},
			svcCtx.Config.KickConnConsumerGroup.Brokers, svcCtx.Config.KickConnConsumerGroup.GetGroupID()),
	}
	s.Subscribe()
	return s
}
func (s *OnlineMessageRelayServiceServer) OnlinePushMsg(ctx context.Context, in *pb.OnlinePushMsgReq) (*pb.OnlinePushMsgResp, error) {
	l := rpclogic.NewOnlinePushMsgLogic(ctx, s.svcCtx)
	return l.OnlinePushMsg(in)
}

func (s *OnlineMessageRelayServiceServer) GetUsersOnlineStatus(ctx context.Context, in *pb.GetUsersOnlineStatusReq) (*pb.GetUsersOnlineStatusResp, error) {
	l := rpclogic.NewGetUsersOnlineStatusLogic(ctx, s.svcCtx)
	return l.GetUsersOnlineStatus(in)
}

func (s *OnlineMessageRelayServiceServer) KickUserConns(ctx context.Context, in *pb.KickUserConnsReq) (*pb.KickUserConnsResp, error) {
	l := rpclogic.NewKickUserConnsLogic(ctx, s.svcCtx)
	return l.KickUserConns(in)
}
