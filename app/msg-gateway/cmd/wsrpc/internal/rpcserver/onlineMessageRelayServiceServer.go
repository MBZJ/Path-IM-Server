// Code generated by goctl. DO NOT EDIT!
// Source: msg-gateway.proto

package rpcserver

import (
	"context"
	"github.com/Path-IM/Path-IM-Server/app/msg-gateway/cmd/wsrpc/internal/rpclogic"
	"github.com/Path-IM/Path-IM-Server/app/msg-gateway/cmd/wsrpc/internal/rpcsvc"
	chatpb "github.com/Path-IM/Path-IM-Server/app/msg/cmd/rpc/pb"
	"github.com/Path-IM/Path-IM-Server/common/xkafka"
	"github.com/Path-IM/Path-IM-Server/common/xtrace"
	"github.com/Shopify/sarama"
	"github.com/golang/protobuf/proto"
	"github.com/zeromicro/go-zero/core/logx"
	"go.opentelemetry.io/otel/attribute"

	"github.com/Path-IM/Path-IM-Server/app/msg-gateway/cmd/wsrpc/pb"
)

type OnlineMessageRelayServiceServer struct {
	svcCtx *rpcsvc.ServiceContext
	pb.UnimplementedOnlineMessageRelayServiceServer
	SingleConsumerGroup *xkafka.MConsumerGroup
	GroupConsumerGroup  *xkafka.MConsumerGroup
}

func (s *OnlineMessageRelayServiceServer) Subscribe() {
	go s.SingleConsumerGroup.RegisterHandleAndConsumer(s)
	go s.GroupConsumerGroup.RegisterHandleAndConsumer(s)
}

func NewOnlineMessageRelayServiceServer(svcCtx *rpcsvc.ServiceContext) *OnlineMessageRelayServiceServer {
	s := &OnlineMessageRelayServiceServer{
		svcCtx: svcCtx,
		SingleConsumerGroup: xkafka.NewMConsumerGroup(&xkafka.MConsumerGroupConfig{
			KafkaVersion:   sarama.V0_10_2_0,
			OffsetsInitial: sarama.OffsetNewest, IsReturnErr: false,
		}, []string{svcCtx.Config.SinglePushConsumer.Topic},
			svcCtx.Config.SinglePushConsumer.Brokers, svcCtx.Config.SinglePushConsumer.GetGroupID()),
		GroupConsumerGroup: xkafka.NewMConsumerGroup(&xkafka.MConsumerGroupConfig{
			KafkaVersion:   sarama.V0_10_2_0,
			OffsetsInitial: sarama.OffsetNewest, IsReturnErr: false,
		}, []string{svcCtx.Config.GroupPushConsumer.Topic},
			svcCtx.Config.GroupPushConsumer.Brokers, svcCtx.Config.GroupPushConsumer.GetGroupID()),
	}
	s.Subscribe()
	return s
}

func (s *OnlineMessageRelayServiceServer) OnlinePushMsg(ctx context.Context, in *pb.OnlinePushMsgReq) (*pb.OnlinePushMsgResp, error) {
	l := rpclogic.NewOnlinePushMsgLogic(ctx, s.svcCtx)
	return l.OnlinePushMsg(in)
}

func (s *OnlineMessageRelayServiceServer) GetUsersOnlineStatus(ctx context.Context, in *pb.GetUsersOnlineStatusReq) (*pb.GetUsersOnlineStatusResp, error) {
	l := rpclogic.NewGetUsersOnlineStatusLogic(ctx, s.svcCtx)
	return l.GetUsersOnlineStatus(in)
}

func (s *OnlineMessageRelayServiceServer) KickUserConns(ctx context.Context, in *pb.KickUserConnsReq) (*pb.KickUserConnsResp, error) {
	l := rpclogic.NewKickUserConnsLogic(ctx, s.svcCtx)
	return l.KickUserConns(in)
}

func (s *OnlineMessageRelayServiceServer) HandleMsg(value []byte, key []byte, topic string, partition int32, offset int64, msg *sarama.ConsumerMessage) error {
	msgFromMQ := &chatpb.PushMsgDataToMQ{}
	if err := proto.Unmarshal(msg.Value, msgFromMQ); err != nil {
		logx.Errorf("unmarshal msg error: %v", err)
		return err
	}
	var err error
	xtrace.RunWithTrace(msgFromMQ.TraceId, func(ctx context.Context) {
		if topic == s.svcCtx.Config.SinglePushConsumer.Topic {
			xtrace.StartFuncSpan(ctx, "MsgGateway.ConsumeSingle.PushMsg2User", func(ctx context.Context) {
				err = s.PushMsg(ctx, msgFromMQ)
				if err != nil {
					logx.Errorf("push Single msg error: %v", err)
				}
			})
		} else if topic == s.svcCtx.Config.GroupPushConsumer.Topic {
			xtrace.StartFuncSpan(ctx, "MsgGateway.ConsumeGroup.PushMsg2GroupMember", func(ctx context.Context) {
				err = s.PushMsg(ctx, msgFromMQ)
				if err != nil {
					logx.Errorf("push Group msg error: %v", err)
				}
			})
		}
	}, attribute.String("msg.key", string(msg.Key)))
	return err
}

func (s *OnlineMessageRelayServiceServer) PushMsg(ctx context.Context, msgFromMQ *chatpb.PushMsgDataToMQ) error {
	l := rpclogic.NewPushMsgLogic(ctx, s.svcCtx)
	return l.PushMsg(msgFromMQ)
}
